---
import Footer from '../components/Footer/Footer.astro';
import Prueba from '../components/Prueba/Prueba.astro';

export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>{title}</title>
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:site" content="@midudev" />
		<meta name="view-transition" content="same-origin" />
	</head>
	<!-- border-8 border-orange-200 -->
	<body>
		<main class="h-full flex flex-col justify-between  m-0 relative">
			<div class="w-full m-auto flex flex-grow-0 z-50" id="content">
				<Prueba />
			</div>
			<div class="flex h-full min-h-screen flex-grow">
				<slot  />
			</div>
			<div class="flex flex-grow-0 z-50">
				<Footer david='text-red-400'/>
			</div>
		</main>

	</body>
</html>


<style is:global>

	:root {
	@font-face {
		font-family: 'ITC Eras Demi';
		src: url('/ITC Eras Demi.ttf');
	}

	--negro: rgb(39, 39, 39);
	--blanco: rgb(222, 222, 222);
	--sombra1: rgba(111, 111, 111, 0.2);
	--sombra2: rgba(255, 255, 255, 1);
	--auxiliar1: #dfac12;
	--auxAmarillo: rgba(223, 173, 16, 0.2);
	--auxiliar2: #00814a;

	--marcado: rgb(rgb(0, 204, 255));

	/* //tipografías */
	--tipo-principal: Helvetica, Arial, sans-serif;
	--tipo-secundaria: 'Open Sans', sans-serif;
	--tipo-terciaria: 'Roboto', sans-serif;
	--tipo-erasdemi: 'ITC Eras';
}

/* Las adaptamos al modo oscuro */
@media (prefers-color-scheme: dark) {
	:root {
		--negro: #ececec;
	}
}
@keyframes rotate {
  from {
    transform: rotate(360deg);
  }
  to {
    transform: rotate(0deg);
  }
}

/* Desactivamos los animations en el caso de que el usuario haya configurado el modo sin animation */
@media (prefers-reduced-motion: reduce) {
	* {
		animation: none !important;
		transition: none !important;
	}
}

/* Reseteamos los margin y paddings de todas las etiquetas */
* {
	margin: 0;
	padding: 0;
	border: 0;
	box-sizing: border-box;
	vertical-align: baseline;
}

/* Evitamos problemas con las imagenes */
img,
picture,
video,
iframe,
figure {
	max-width: 100%;
	width: 100%;
	display: block;
	/* opcional */
	object-fit: cover;
	/* opcional */
	object-position: center center;
}

/* Configuramos anclas suaves */
html {
	scroll-behavior: smooth;
}

code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}

/* Evitamos problemas con los pseudoelementos de quotes */
blockquote:before,
blockquote:after,
q:before,
q:after {
	content: '';
	content: none;
}

/* Configuramos el texto que seleccionamos */
::selection {
	background-color: var(--negro);
	color: var(--blanco);
}

/* Reseteamos las tablas */
table,
tr,
td {
	border-collapse: collapse;
	border-spacing: 0;
}

/* Evitamos problemas con los SVG */
svg {
	width: 100%;
	display: block;
	fill: currentColor;
}

/* Configuramos la tipografía para toda la web */
body {
	min-height: 100vh;
	font-size: 100%;
	font-family: var(--tipo-principal);
	color: var(--negro);
	/* opcional */
	line-height: 1.4em;
	/* opcional */
	hyphens: auto;
	/* opcional */
	font-smooth: always;
	/* opcional */
	-webkit-font-smoothing: antialiased;
	/* opcional */
	-moz-osx-font-smoothing: grayscale;
}

@keyframes fade-in {
		from { opacity: 0; }
	}

</style>


<!-- // VIEW-TRANSITION ========================= -->
<script>
	if (document.startViewTransition) {
		window.navigation.addEventListener('navigate', (event) => {
			const toUrl = new URL(event.destination.url)
	
			// es una página externa? si es así, lo ignoramos
			if (location.origin !== toUrl.origin) return
	
			// si es una navegación en el mismo dominio (origen)
			event.intercept({
				async handler () {
					// vamos a cargar la página de destino
					// utilizando un fetch para obtener el HTML
					const response = await fetch(toUrl.pathname) // /clean-code
					const text = await response.text()
					// quedarnos sólo con el contenido del html dentro de la etiqueta body
					// usamos un regex para extraerlo
					const [, data] = text.match(/<body>([\s\S]*)<\/body>/i)
	
					// utilizar la api de View Transition API
					document.startViewTransition(() => {
						// el scroll hacia arriba del todo
						document.body.innerHTML = data
						document.documentElement.scrollTop = 0
					})
				}
			})
		})
	}
</script>